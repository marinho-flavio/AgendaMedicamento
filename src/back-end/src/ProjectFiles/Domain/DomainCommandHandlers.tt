using MediatR;
using FluentValidation.Results;
using SES.CrossCuting.Infra.Utils.Extensions;
using SES.Core.Application.DTO.Extensions;
using SES.Core.Domain.Aggregates.CommonAgg.Commands.Handles;
<#foreach(var namespaces in groupEntitiesT4) {#>
namespace <#= namespaces.Key.Replace(".Entities",".CommandHandlers") #>
{
<#if(entities.Any()){#>
    using Filters;
    using ModelEvents;
    using Repositories;
    using CommandModels;
    using Entities;
    using Specifications;
    using Queries.Models;
<#}#>    
    public class Base<#= AggName #>CommandHandler :BaseCommandHandler{public Base<#= AggName #>CommandHandler(IServiceProvider provider,IMediator mediator):base(mediator, provider){}}
<#foreach(var entity in namespaces) {
    var repoTypeName = $"I{entity.Name}Repository";
	var repoVarName = $"_{ToCamelCase(entity.Name)}Repository";
#>
    public partial class <#= entity.Name #>CommandHandler : Base<#= AggName #>CommandHandler,
        IRequestHandler<Create<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<DeleteRange<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<Delete<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<UpdateRange<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<Update<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<Active<#= entity.Name #>Command,ValidationResult>,
        IRequestHandler<Deactive<#= entity.Name #>Command,ValidationResult>
    {
        <#= repoTypeName #> <#= repoVarName #>;

        public <#= entity.Name #>CommandHandler(IServiceProvider provider,IMediator mediator,<#= repoTypeName #> <#= repoVarName.Substring(1) #> ) : base(provider,mediator) { <#= repoVarName #> = <#= repoVarName.Substring(1) #>; }

        partial void OnCreate(<#=entity.Name#> entity);
        partial void OnUpdate(<#=entity.Name#> entity);

        public async Task<ValidationResult> Handle(Create<#= entity.Name #>Command command,CancellationToken cancellationToken) {

            <#= entity.Name #> entity;
            if (command.Query != null || !string.IsNullOrWhiteSpace(command.Request.ExternalId))
            {
                var filter = <#= entity.Name #>Filters.GetFilters(command.Query ?? new <#= entity.Name #>QueryModel { ExternalIdEqual = command.Request.ExternalId });
                entity = await <#= repoVarName #>.FindAsync(filter);
                if (entity != null)
                {
                    if (command.UpdateIfExists)
                        return await Handle(new Update<#= entity.Name #>Command(
                            command.Context,
                            new Queries.Models.<#= entity.Name #>QueryModel { ExternalIdEqual = command.Request.ExternalId },
                            command.Request),
                        cancellationToken);
                }
            }
            entity = command.Request.ProjectedAs<Entities.<#= entity.Name #>>();
            entity.AddDomainEvent(new <#= entity.Name #>CreatedEvent(command.Context,entity));

            OnCreate(entity);
			<#= repoVarName #>.Add(entity);

            return await Commit(<#= repoVarName #>.UnitOfWork);
        }

        public async Task<ValidationResult> Handle(Delete<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            var filter = <#= entity.Name #>Filters.GetFilters(command.Query);
			var entity = await <#= repoVarName #>.FindAsync(filter);

            if(entity is null) {
                return AddError($"Entity {nameof(<#= entity.Name #>)} not found with the request.");
            }
            
            if (command.IsLogicalDeletion)
                entity.Delete();
            else
			    <#= repoVarName #>.Delete(entity);

            entity.AddDomainEvent(new <#= entity.Name #>DeletedEvent(command.Context,entity));
            
            return await Commit(<#= repoVarName #>.UnitOfWork);
        }

        public async Task<ValidationResult> Handle(DeleteRange<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            var filter = <#= entity.Name #>Filters.GetFilters(command.Query);
			var entities = await <#= repoVarName #>.FindAllAsync(filter);

			<#= repoVarName #>.DeleteRange(entities);

            PublishLog(command);
            
            return await Commit(<#= repoVarName #>.UnitOfWork);
        }

        public async Task<ValidationResult> Handle(Update<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            return await Handle(new UpdateRange<#= entity.Name #>Command(command.Context,command.Query,command.Request),cancellationToken);
        }

        public async Task<ValidationResult> Handle(UpdateRange<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            var entities = new List<<#= entity.Name #>>();
            foreach (var item in command.Query)
            {
                var filter = <#= entity.Name #>Filters.GetFilters(item.Key);
                var entity = await <#= repoVarName #>.FindAsync(filter);
                
                if(entity == null) {
                    if(command.CreateIfNotExists)
                        return await Handle(new Create<#= entity.Name #>Command(command.Context,item.Value),cancellationToken);
                    return AddError($"Entity {nameof(<#= entity.Name #>)} not found with the request.");
                }

                entity.Update(item.Value.ProjectedAs<<#= entity.Name #>>(),"Id");
                OnUpdate(entity);
                entity.AddDomainEvent(new <#= entity.Name #>UpdatedEvent(command.Context,entity));
            }
            
            PublishLog(command);

            return await Commit(<#= repoVarName #>.UnitOfWork);
        }
         
        public async Task<ValidationResult> Handle(Active<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            var <#= entity.Name.ToLower() #> = await <#= repoVarName #>.FindAsync(filter: <#= entity.Name #>Filters.GetFilters(command.Query));
            //<#= entity.Name.ToLower() #>.Disable();

            PublishLog(command);
            
            return await Commit(<#= repoVarName #>.UnitOfWork);
        }

        public async Task<ValidationResult> Handle(Deactive<#= entity.Name #>Command command,CancellationToken cancellationToken) {
            var <#= entity.Name.ToLower() #> = await <#= repoVarName #>.FindAsync(filter: <#= entity.Name #>Filters.GetFilters(command.Query));
            //<#= entity.Name.ToLower() #>.Enable();

            PublishLog(command);
            
            return await Commit(<#= repoVarName #>.UnitOfWork);
        }
    }
<# } #>
}
<# } #>
<# SaveOutputToSubFolder(
    folderName: $"T4", 
    outputFileName: @$"{AggName}.DomainCommandHandlers.cs", 
    recreateFileIfExists: true); #>