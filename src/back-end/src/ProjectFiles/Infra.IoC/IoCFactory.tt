<#@ include file="..\project.tt" #>
<#
	var AggName = GetMyAggName();
	var entities = GetEntities("Domain", withAttribute: "EndpointsT4");
	var entitiesT4 = GetMyAggregateEntities(withAttribute: "EndpointsT4", withEndpoint: "HttpPost");
#>

<# foreach (var namespc in entities.GroupBy(p => p.Namespace.FullName)) { #>
using <#= namespc.Key.Replace("Entities", "Repositories").Replace("Domain","Infra.Data") #>;
using <#= namespc.Key.Replace("Entities", "AppServices").Replace("Domain","Application") #>;
using <#= namespc.Key.Replace("Entities", "Repositories") #>;
<# } #>
<# foreach (var namespc in entitiesT4.GroupBy(p => p.Namespace.FullName)) { #>
using <#= namespc.Key.Replace("Entities", "AppServices").Replace("Domain","Application") #>;
<# } #>
<# foreach (var namespc in GetServices().GroupBy(p => p.Namespace.FullName)) { #>
using <#= namespc.Key #>;
using <#= namespc.Key.Replace(".Interfaces","") #>;
<# } #>
using Microsoft.Extensions.DependencyInjection;
using MediatR;
using SES.CrossCutting.Infra.Log.Contexts;
using SES.CrossCutting.Infra.Log.Providers;
using SES.Core.Domain.Aggregates.CommonAgg.Commands;
using System.Reflection;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore;
using SES.Core.Application.DTO.Seedwork;
using SES.Core.Infra.IoC;

namespace <#= GetDefaultNamespace() #>.<#= GetCurrentProject().Name #> {

	using Infra.Data.Context;
<# if(entitiesT4?.Any() == true) { #>
	using Domain.Aggregates.<#= AggName #>.CommandHandlers;
<# } #>	

    public partial class IoCFactory : IBaseIoC {
		
		partial void ConfigureFactories();
		partial void ConfigureValidators();
		partial void ConfigureAdditionalAppServices(IServiceCollection services);
		partial void ConfigureAdditionalRepositories();

        #region Constructor

        private static IoCFactory _current;
		public static IoCFactory Current { get { return _current ?? (_current = new IoCFactory()); } }

        #endregion

        #region Methods

        public void Configure(IConfiguration configuration, IServiceCollection services) {
			ConfigureFactories();
			ConfigureLog(services);
			ConfigureMediatR(services);
			ConfigureAppServices(services);
			ConfigureRepositories(services);
			ConfigureDatabase(services, configuration);
			ConfigureMappings();
        }

		void ConfigureMappings()
		{
			MapperFactory.Setup(this.GetType().Namespace.Replace("Infra.IoC","Domain"));
		}

		void ConfigureMediatR(IServiceCollection services)
		{
			services.AddMediatR(typeof(BaseCommand).GetTypeInfo().Assembly);
<# foreach(var entity in entities) { #>
			services.AddMediatR(typeof(Base<#= AggName #>CommandHandler).GetTypeInfo().Assembly);
			<#break;#>
<# } #>			
		}

		void ConfigureLog(IServiceCollection services)
		{
			services.AddScoped<ILogRequestContext, LogRequestContext>();
			services.AddSingleton<ILogProvider, LoggerProvider>();
		}

		void ConfigureDatabase(IServiceCollection services, IConfiguration configuration)
        {
			var connectionString = configuration.GetConnectionString("DefaultConnection");
			services.AddDbContext<<#= AggName #>Context>(options =>
			options.UseNpgsql(connectionString));
		}

		void ConfigureRepositories(IServiceCollection services) {

<# foreach(var entity in entities) { #>
            services.AddScoped<I<#= entity.Name #>Repository, <#= entity.Name #>Repository>();
            services.AddScoped<I<#= entity.Name #>MongoRepository, <#= entity.Name #>MongoRepository>();
<# } #>			
			ConfigureAdditionalRepositories();
		}

		void ConfigureAppServices(IServiceCollection services) {

<# foreach(var entity in entities) { #>
            services.AddScoped<I<#= entity.Name #>AppService, <#= entity.Name #>AppService>();
<# } #>		
			ConfigureAdditionalAppServices(services);
		}

        #endregion
    }
}