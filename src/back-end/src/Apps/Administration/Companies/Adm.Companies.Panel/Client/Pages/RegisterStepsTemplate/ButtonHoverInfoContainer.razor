<div class="popup-toggler" @onclick="()=>{ OnClick(); }">
    <div class="popup-toggler-container">
        @if (!IsClickable || _isActive)
        {
            @ChildComponenet
        }
        else
        {
            @DesactivatedChildComponenet
        }
    </div>
    <img src="@(this.IconUrl ?? this._img)"
         class="icons-item @(IsClickable? "clickable" : "")"
         @onmouseover="()=>{ _isHover = true; }"
         @onmouseout="()=>{ _isHover = false; }" />
</div>

@code {
    string _img => $"/imgs/components/{_src}-btn/{(_src + (_isHover && !_isActive ? "-hover" : "") + (_isActive ? "-enabled" : ""))}.svg";
    protected override Task OnInitializedAsync()
    {
        _src = Type.ToString();

        if (IsClickable && DesactivatedChildComponenet == null)
            throw new NullReferenceException(nameof(this.DesactivatedChildComponenet));

        return base.OnInitializedAsync();
    }

    public enum ButtonHoverTypes
    {
        Restrictions,
        AutoSave
    }

    [Parameter] public string IconUrl { get; set; }
    [Parameter] public bool IsClickable { get; set; }

    [Parameter] public ButtonHoverTypes Type { get; set; }

    [Parameter] public RenderFragment ChildComponenet { get; set; }
    [Parameter] public RenderFragment? DesactivatedChildComponenet { get; set; }
    [Parameter] public SES.Core.Application.DTO.Aggregates.CommonAgg.ValueObjects.AutoSaveSettingsDTO AutoSaveSettings { get; set; }

    string _src = "";
    bool _isHover = false;
    bool _isActive => AutoSaveSettings?.Enabled == true;

    void OnClick()
    {
        if (_isHover && _isActive) return;
        if (!IsClickable) return;

        var newVal = IsClickable && !_isActive;
        
        AutoSaveSettings?.OnUpdate(newVal);
    }
}