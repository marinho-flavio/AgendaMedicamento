@using SES.Core.Application.DTO.Aggregates.CommonAgg.Commands.Responses
@using SES.Core.Application.DTO.Aggregates.CommonAgg.Models
@using Newtonsoft.Json
@using System.Text
@using System.Linq.Expressions;

@typeparam T where T : IEntityDTO, new()
    
<SfAutoComplete name="@MemberName" TValue="T" TItem="T" Placeholder="@MemberName" DataSource="@CEPS" class="x21011-690 inter-normal-silver-14px" ShowClearButton="true">
    <DropDownListTemplates TItem="T">
        <ItemTemplate>
            @context.Title -
            @if (!string.IsNullOrWhiteSpace(context.SubTitle))
            {
                <span class="logradouro">
                    @($"{context.SubTitle}")
                </span>
            }
        </ItemTemplate>
    </DropDownListTemplates>
    <AutoCompleteFieldSettings Value="@MemberName" />
    <AutoCompleteEvents OnValueSelect="OnSelect" TItem="T" TValue="T" Filtering="@OnFiltering" />
</SfAutoComplete>

@code {
    [Parameter] public Expression<Func<T, object>> Selector { get; set; }
    string MemberName => (Selector.Body as MemberExpression).Member.Name;
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public EventCallback<SelectEventArgs<T>> OnSelect { get; set; }
    [Parameter] public string Query { get; set; }
    [Parameter] public T Model { get; set; } = new T();

    public List<T> CEPS { get; set; } = new List<T>();

    [Inject] HttpClient _client { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task OnFiltering(FilteringEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Text)) return;

        var result = await _client.GetAsync($"{new T().GetSearchRoute()}/?{MemberName}startswith={args.Text}");

        var json = await result?.Content?.ReadAsStringAsync();

        if (result.StatusCode != System.Net.HttpStatusCode.OK || string.IsNullOrWhiteSpace(json))
            return;

        if (!json.TryDeserializeJSON<GetHttpResponseDTO<List<T>>>(out var jsonConverted) || jsonConverted.Data == null)
            return;

        //this.currentCep = data.FirstOrDefault();
        CEPS = jsonConverted.Data;

        StateHasChanged();
    }
}