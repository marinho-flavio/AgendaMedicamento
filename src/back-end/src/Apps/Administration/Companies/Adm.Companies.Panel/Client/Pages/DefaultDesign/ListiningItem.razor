@using SES.Core.Application.DTO.Aggregates.CommonAgg.Commands.Responses;
@using SES.Core.Application.DTO.Aggregates.CommonAgg.ValueObjects;
@using SES.Core.Application.DTO.Aggregates.CommonAgg.Models
@using SES.Core.Application.DTO.Attributes
@using System.Collections.Generic;
@using System.ComponentModel;
@using System.Reflection;

@typeparam T where T : EntityDTO, new()

<div class="header-title-columms-grupo-empresa">
    <div class="container-sections-columms">
        @if (Context != null)
        {
            @foreach (var item in Context.Properties)
            {
                <div class="container-nome-fantasia">
                    <div class="container-title-1">
                        <div class="nome-fantasia valign-text-middle inter-semi-bold-black-12px">@(item.info.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? item.info.Name)</div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<div class="columms-list">
    @if (Model == null)
    {
        <h1>Carregando...</h1>
    }
    else
    {
        foreach (var item in Model)
        {
            <ListiningItemCard T="T" Item="item" />
        }
    }
</div>

@code {
    List<string> allProps = new List<string>();

    [CascadingParameter] public T[] Model { get; set; }
    [Inject] HttpClient _http { get; set; }
    [CascadingParameter] IListiningContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Context != null)
        {

        }
    }

    public async Task RefreshListining()
    {
        this.Model = null;
        this.StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Context != null && Model==null)
        {
            try
            {
                 this.Model = (await _http.GetFromJsonAsync<GetHttpResponseDTO<T[]>>(
                    $"{new T().GetRoute()}/summary?Page={Context.Page}&Size={Context.Size}&OrderBy={Context.OrderBy}&OrderByDesc={Context.OrderByDesc}&{Context.QueryString}"))?.Data as T[] ?? new T[0];
            }
            catch (Exception ex)
            {

                throw;
            }
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}